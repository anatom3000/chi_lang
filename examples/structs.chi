extern "<stdio.h>" {
    def printf(fmt_str: str, ...)
}

struct Point {
    x: float,
    y: float,
}

def (self: Point).add(other: Point) -> Point {
    return Point {
        x: self.x + other.x,
        y: self.y + other.y
    }
}

// method overloading
def (self: Point).add(other: float) -> Point {
    return Point {
        x: self.x + other,
        y: self.y + other
    }
}

def (self: !Point).add_in_place(other: Point) {
    (*self).x = (*self).x + other.x
    (*self).y = (*self).y + other.y
}

struct Line {
    start: Point,
    end: Point
}

def main() {
    let origin = Point {
        x: 1.0,
        y: -1.0
    }
    
    
    let result = origin.add(Point { x: 2.0, y: 40.0 })

    // method overloading is supported
    let origin_offset = origin.add(5.0).add(2.0)
    printf("origin_offset is at (%f, %f).\n", origin_offset.x, origin_offset.y)


    // we misplaced the origin, let's fix it!
    // luckily, structs are mutable
    origin.x = 0.0
    origin.y = 0.0
    
    // of course we can access struct attributes
    printf("The origin is at (%f, %f).\n", origin.x, origin.y)
    
    printf("The result is at (%f, %f).\n", result.x, result.y)

    origin.add_in_place(Point { x: 2.0, y: 4.0 })

    printf("The origin has been moved and is now at (%f, %f).\n", origin.x, origin.y)


    let unit = Line {
        start: Point { x: 0.0, y: 0.0 },
        end:   Point { x: 1.0, y: 1.0 },
    }

    printf("The line starts at (%f, %f), ends at (%f, %f).\n", unit.start.x, unit.start.y, unit.end.x, unit.end.y)

}